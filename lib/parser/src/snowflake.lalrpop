//
// parser - snowflake's parser
//
// copyright (c) 2020 the snowflake authors <whiskerdev@protonmail.com>
// this source code form is subject to the terms of the mozilla public
// license, v. 2.0. if a copy of the mpl was not distributed with this
// file, you can obtain one at http://mozilla.org/MPL/2.0/.
//

// note(@bree): no decendents of ast should be "use"d
// to preserve a visual separation between parsing and ast  
use crate::ast;
use crate::token::Token;
use num_bigint::BigInt;

grammar;

pub Program: Vec<ast::Statement> = {
    ProgramLine* => <>.into_iter().flatten().collect()
}

pub ProgramLine: Vec<ast::Statement> = {
    <s:Statement> "\n" => vec![s],
    "\n" => vec![]
}

// Begin Types
pub TypeStatement: ast::Statement = {
    TypeDecl
}

pub TypeDecl: ast::Statement = {
    <name:Identifier> "::" <expr:TypeExpression> => ast::Statement::TypeDecl {
        name: name,
        body: expr
    }
}

pub TypeExpression: ast::Type = {
    SubTypeExpression,
    FnSig,
    TagDecl => ast::Type::Tag(<>),
}

pub SubTypeExpression: ast::Type = {
    "(" <e:TypeExpression> ")" => e,
    TypeLiteral
}

pub FnSig: ast::Type = {
    <args:SubTypeExpression+> "->" <ret:TypeExpression> => {
        let mut out_args = vec![];
        for arg in args {
            out_args.push(Box::new(arg))
        };
        ast::Type::FnSig {
            args: out_args,
            ret: Box::new(ret)
        }
    }
}

pub TypeLiteral: ast::Type = {
    Integer => ast::Type::Nat(<>),
    Identifier => ast::Type::Identifier(<>),
}
// End Types

pub Statement: ast::Statement = {
    TypeStatement,
    FnDecl,
    ValueDeclStatement,
    // Expression => ast::Statement::Expression(<>)
}

pub FnDecl: ast::Statement = {
    <name:Identifier> <args:Identifier*> "=>" <body:Block> => ast::Statement::FnDecl {
        name: name,
        args: args,
        body: body,
    }
}

// todo: fix this hack
pub ValueDeclStatement: ast::Statement =  {
    ValueDecl => ast::Statement::Expression(<>)
}


pub Match: ast::Expression = {
    "match" <expr:Expression> "=>" <parts:MatchBlock> => ast::Expression::Match {
        expr: Box::new(expr),
        args: parts,
    }
}

// todo: macro/generic
pub MatchBlock: Vec<ast::Expression> = {
    "\n" Indent <patterns:MatchPart+> Dedent => patterns,
}

pub MatchPart: ast::Expression = {
    <pat:Pattern> "=>" <body:Block> => ast::Expression::Destructure {
        pat: pat,
        body: body,
    }
}

pub Pattern: ast::Pattern = {
    RangePattern,
    LiteralPattern,
    WildcardPattern,
}

pub LiteralPattern: ast::Pattern = {
    Integer => ast::Pattern::Integer(<>),
    Identifier => ast::Pattern::Identifier(<>),
    "String" => ast::Pattern::StringLiteral(<>),
}

pub RangePattern: ast::Pattern = {
    <start:LiteralPattern> ".." <end:LiteralPattern> => ast::Pattern::Range {
        start: Some(Box::new(start)),
        end: Some(Box::new(end)),
    }
}

pub WildcardPattern: ast::Pattern = {
    "_" => ast::Pattern::Wildcard,
}

pub ValueDecl: ast::Expression =  {
    // todo: LetIn needs to be transformed into something more usable
    "let" <assigns:NonEmptyListOf<ValueAssign, ",">> "in" <block:Block> => ast::Expression::ValueDecl {
        assigns: assigns.into_iter().map(|e| Box::new(e)).collect(),
        body: Some(block)
    },
    // todo: change this because \n is a hack to make this work atm due to ambiguity like "let a = let b ..."
    "let" <assign:ValueAssign> "\n" => ast::Expression::ValueDecl {
        assigns: vec![Box::new(assign)],
        body: None
    },
    ValueAssign,
}

pub ValueAssign: ast::Expression = {
    <p:Pattern> "=" <e:Expression> => ast::Expression::ValueAssign {
        pat: p,
        expr: Box::new(e)
    },
    <pat:TagAssign> "=" <tag:TagDecl> => ast::Expression::TagAssign {
        tag: pat,
        expr: tag,
    }
}

// (Main)Expression and SubExpression are a solution to remove abiguity issues with FnCall
// for exampe: "add a b" could be seen as able to be parsed multiple ways { add(a, b) or add(a(b)) }
// what this means is that FnCall can't directly have another FnCall in it without some other enclosure.
pub Expression: ast::Expression = {
    SubExpression,
    FnCall,
    Match,
    ValueDecl,
}

pub SubExpression: ast::Expression = {
    OpCall,
    CircumfixCall,
}

pub Block: Vec<Box<ast::Statement>> = {
    <s:ExpressionStatement> => vec![s],
    "\n" Indent <s:ExpressionStatement+> Dedent => s
}

pub ExpressionStatement: Box<ast::Statement> = {
    <e:Expression> "\n" => Box::new(ast::Statement::Expression(e))
}

pub OpCall: ast::Expression = {
    <l:Atom> <op:Op> <r:OpCall> => ast::Expression::OpCall {
        op: op,
        args: vec![
            Box::new(l),
            Box::new(r),
        ]
    },
    Atom
}

// todo: make this not expr, also make List not hardcoded myabe based but macro/ast
pub CircumfixCall: ast::Expression = {
    "[" <exprs:NonEmptyListOf<Expression, ",">> "]" => ast::Expression::List(exprs.into_iter().map(|e| Box::new(e)).collect()),
}

// note(@bree): possibly future use, may remove.
pub Atom: ast::Expression = {
    "(" <expr:Expression> ")" "::" <ty:TypeLiteral> => ast::Expression::TypeDecl {
        ty: ty,
        expr: Box::new(expr),
    },
    "(" <e:Expression> ")" => e,
    Literal,
}

// FnCall has a rather ambiguous grammar
// any change to the grammer has a possibility of conflicting with FnCall
pub FnCall: ast::Expression = {
    <name:Identifier> <args:SubExpression+> => ast::Expression::FnCall {
        name: name,
        args: args
    }
}

pub TagDecl: ast::Tag = {
    "tag" <expr:TagExpression> => expr
}

pub TagExpression: ast::Tag = {
    TagOpCall,
}

pub TagOpCall: ast::Tag = {
    <l:TagLiteral> <op:Op> <r:TagOpCall> => ast::Tag::OpCall {
        op: op,
        args: vec![Box::new(l), Box::new(r)]
    },
    TagAtom,
}

pub TagAtom: ast::Tag = {
    "(" <e:TagExpression> ")" => e,
    TagLiteral
}

pub TagLiteral: ast::Tag = {
    "*" <name:Identifier> => ast::Tag::PrimaryIdentifier(name),
    Identifier => ast::Tag::Identifier(<>)
}

pub TagAssign: ast::Tag = {
    "#{" <pats:TagPattern+> "}" => ast::Tag::Assign {
        pats: pats.into_iter().map(|p| Box::new(p)).collect(),
    }
}

pub TagPattern: ast::Tag = {
    TagLiteral
}

pub Op: ast::OpSymbol = {
  "+" => ast::OpSymbol::Plus,
  "-" => ast::OpSymbol::Minus,
  "*" => ast::OpSymbol::Star,
  "/" => ast::OpSymbol::ForwardSlash,
  "<" => ast::OpSymbol::LAngleBracket,
  ">" => ast::OpSymbol::RAngleBracket,
  "^" => ast::OpSymbol::Circumflex,
}

pub Literal: ast::Expression = {
  Integer => ast::Expression::Integer(<>),
  Identifier => ast::Expression::Identifier(<>),
  "String" => ast::Expression::StringLiteral(<>)
}

pub Integer: BigInt = {
  "Integer"
}

pub Identifier: String = {
  "Identifier"
}

NonEmptyListOf<Type, Seperator>: Vec<Type> = {
    <values:(<Type> Seperator)*> <value:Type> => {
        let mut values = values;
        values.push(value);
        values
    }
}

ListOf<Type, Seperator>: Vec<Type> = {
    <values:(<Type> Seperator)*> <value:Type?> => match value {
        None => values,
        Some(value) => {
            let mut values = values;
            values.push(value);
            values
        }
    }
}

extern {
    type Location = usize;
    type Error = String;

    enum Token {
        "Identifier" => Token::Identifier(<String>),
        "Float" => Token::Float(<f64>),
        "Integer" => Token::Integer(<BigInt>),
        "String" => Token::StringLiteral(<String>),
        "match" => Token::Match,
        "let" => Token::Let,
        "in" => Token::In,
        "tag" => Token::Tag,
        "=" => Token::Equal,
        ".." => Token::DotDot,
        "::" => Token::ColonColon,
        "**" => Token::StarStar,
        "=>" => Token::LargeArrowRight,
        "->" => Token::SmallArrowRight,
        "#{" => Token::TagStart,
        "Whitespace" => Token::Whitespace,
        // "Symbol" => Token::Symbol(<char>),
        // indentation
        Indent => Token::Indent,
        Dedent => Token::Dedent,
        "\n" => Token::Newline,
        // symbols
        "(" => Token::Symbol('('),
        ")" => Token::Symbol(')'),
        "<" => Token::Symbol('<'),
        ">" => Token::Symbol('>'),
        "[" => Token::Symbol('['),
        "]" => Token::Symbol(']'),
        "{" => Token::Symbol('{'),
        "}" => Token::Symbol('}'),
        "+" => Token::Symbol('+'),
        "-" => Token::Symbol('-'),
        "*" => Token::Symbol('*'),
        "/" => Token::Symbol('/'),
        "_" => Token::Symbol('_'),
        ";" => Token::Symbol(';'),
        "," => Token::Symbol(','),
        "^" => Token::Symbol('^'),
    }
}
